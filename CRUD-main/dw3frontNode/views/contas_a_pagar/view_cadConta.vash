@html.extend('layout', function(model){ @html.block('content', function(model){

<main>
  <div class="container-fluid px-4">
    <h1 class="mt-2">@model.title</h1>
    <ol class="breadcrumb mb-2">
      <li class="breadcrumb-item active">@model.title</li>
    </ol>
    <div class="row">
      <div class="col-xl-12">
        <div class="card-header"></div>
        
        <div class="card-body">
          <div class="col-sm-6 col-xxl-12">
            <form id="form">

              <div class="mb-1" style="display: none">
                <input type="number" name="contaid" class="form-control" id="contaid" />
              </div>

              <!-- Descrição -->
              <div class="mb-1 row">
                <label for="descricao" class="col-sm-2 col-xxl-1 col-form-label required">Descrição:</label>
                <div class="col-sm-4 col-xxl-3">
                  <input type="text" name="descricao" class="form-control" id="descricao" maxlength="255" required/>
                </div>
              </div>

              <!-- Valor -->
              <div class="mb-1 row">
                <label for="valor" class="col-sm-2 col-xxl-1 col-form-label required">Valor:</label>
                <div class="col-sm-4 col-xxl-3">
                  <input type="text" name="valor" class="form-control" id="valor" required/>
                </div>
              </div>

              <!-- Data de Vencimento -->
              <div class="mb-1 row">
                <label for="data_vencimento" class="col-sm-2 col-xxl-1 col-form-label required">Data Vencimento:</label>
                <div class="col-sm-4 col-xxl-3">
                  <input type="date" name="data_vencimento" class="form-control" id="data_vencimento" required />
                </div>
              </div>

              <!-- Data de Pagamento -->
              <div class="mb-1 row">
                <label for="data_pagamento" class="col-sm-2 col-xxl-1 col-form-label">Data Pagamento:</label>
                <div class="col-sm-4 col-xxl-3">
                  <input type="date" name="data_pagamento" class="form-control" id="data_pagamento"/>
                </div>
              </div>

              <!-- Checkbox Deleted -->
              <div class="form-check">
                <input class="form-check-input" type="checkbox" name="deleted" id="deleted" disabled />
                <label class="form-check-label" for="deleted"> Removido </label>
              </div>

            </form>
          </div>
          <div class="">
            <button type="button" class="btn btn-success me-2" onclick="btnSalvar()" id="btnSalvar" hidden>
              Salvar
            </button>

            <button type="button" class="btn btn-warning me-2" onclick="btnAlterar()" id="btnAlterar" hidden>
              Alterar
            </button>

            <button type="button" class="btn btn-warning me-2" onclick="btnSalvarAlteracao()" id="btnSalvarAlteracao" hidden>
              Salvar Alteração
            </button>

            <button type="button" class="btn btn-info me-2" onclick="btnCancelarAlteracao()" id="btnCancelarAlteracao" hidden>
              Cancelar Alteração
            </button>

            <button type="" class="btn btn-danger" onclick="btnRemover()" id="btnRemover" hidden>
              Remover
            </button>

            <button type="button" class="btn btn-primary" onclick="window.location.href = '/contas_a_pagar'" id="btnFechar">
              Fechar
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

}) })

<script>
  const form = document.getElementById("form");
  var oper = "@model.oper";

  window.onload = limpaForm();

  //@ Limpa o conteúdo dos campos do formulário
  async function limpaForm() {

    $("#form").each(function() {
      this.reset();
    });
    
    desabilitaForm();

    // Mostra os botões de acordo com o tipo da operação
    if (oper == "c") {
      $("#btnSalvar").prop("hidden", false);
      habilitaForm();
    }

    if (oper == "u") {
      $("#btnAlterar").prop("hidden", false);
    }

    //Necessário para buscar dados de acordo com o ID para serem alterados
    if (oper == "u") {
      idBusca = "@model.idBusca";
      await getDados(idBusca);
    }

    //Coloca o curso no primeiro campo do formulário
    $("#descricao").focus();
  }

  const convertToDateFormat = (isoString) => {
      const date = new Date(isoString);
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0'); // Adiciona zero à esquerda se for um único dígito
      const day = String(date.getDate()).padStart(2, '0'); // Adiciona zero à esquerda se for um único dígito
    
      return `${year}-${month}-${day}`;
  }

  //@ Busca os dados de acordo com o ID para serem alterados
  async function getDados(idBuscaPar) {
    console.log("[getDados] Função chamada"); // Correção 1: Checagem de fluxo
    console.log("[getDados] idBusca", idBuscaPar); // Log já existente para idBusca

    try {
        const resp = await axios.post(
            "/contas_a_pagar/getDados", {
                idBusca: idBuscaPar
            }, {
                headers: {
                    "Content-Type": "application/json",
                },
            }
        );
        
        console.log("Dados recebidos: ", resp.data); // Correção 1: Checagem de dados recebidos

        if (resp.data.status == "ok") {
            contaID = idBuscaPar;
            console.log("Conta ID recebido: ", contaID); // Correção 1: Checagem do ID
            const formattedVencimento = convertToDateFormat(resp.data.registro.data_vencimento);
            const formattedPagamento = convertToDateFormat(resp.data.registro.data_pagamento);
            
            // Correção 2: Usar jQuery para definir o valor
            $("#contaid").val(parseInt(resp.data.registro.contaID));
            $("#descricao").val(resp.data.registro.descricao);
            $("#valor").val(resp.data.registro.valor);
            $("#data_vencimento").val(formattedVencimento);
            $("#data_pagamento").val(formattedPagamento);
            
            if (!resp.data.registro.deleted) {
                $("#deleted").prop("checked", false);
            } else {
                $("#deleted").prop("checked", true);
            }
        } else {
            alert("Houve erro ao buscar os dados da conta a pagar!");
        }
    } catch (error) {
        alert("[view_cadconta|getDados]Ocorreu um erro inesperado!" + error);
    }
}


  //@ Valida o formulário antes de salvá-lo
function validaForm(contaData) {
  var validado = true;
    $("#form input, #form select").each(function(index) {
      var input = $(this);
      if (
        input.attr("type") == "text" &&
        input.prop("required") &&
        String(input.val()).length == 0
      ) {
        alert("Campo obrigatório");
        console.log('Type: ' + input.attr('type') + ' ID: ' + input.attr('id') + ' Name: ' + input.attr('name') + ' Value: ' + input.val() + ' Obrigatório: ' + input.prop("required"));
        $(input).focus();
        validado = false;
        return false;
      }
    });

    // Agora usando contaData diretamente, já que é o argumento da função
    if (contaData.deleted === "on") {
      contaData.deleted = true;
    } else {
      contaData.deleted = false;
    }
    contaData.deleted = false;

  return validado;
}



  //@ Salva os dados
async function btnSalvar() {
    const formData = new FormData(form);

    const validado = validaForm(formData);
    if (!validado) {
      return;
    }

    try {
      resp = await axios.post("/contas_a_pagar/insertContaAPagar", formData, {
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (resp.data.status == "ok") {
        alert(resp.data.mensagem);
        limpaForm();
        window.open("/contas_a_pagar", "_self");
      } else {
        alert("Houve um erro: " + resp.data.mensagem);
      }
    } catch (error) {
      alert("[view_cadContas|btnSalvar]Ocorreu um erro inesperado!" + error);
    }
  }

  //@ Habilita form para alteração
  function habilitaForm() {
    $("#descricao").prop("class", "form-control");
    $("#descricao").prop("readonly", false);

    $("#descricao").prop("class", "form-control");
    $("#descricao").prop("readonly", false);

    $("#valor").prop("class", "form-control");
    $("#valor").prop("readonly", false);

    $("#data_vencimento").prop("class", "form-control");
    $("#data_vencimento").prop("readonly", false);

    $("#data_pagamento").prop("class", "form-control");
    $("#data_pagamento").prop("readonly", false);


    $("#deleted").prop("disabled", false);
  }

  //@ Habilita a alteração
  async function btnAlterar() {
    $("#btnSalvarAlteracao").prop("hidden", false);
    $("#btnCancelarAlteracao").prop("hidden", false);
    $("#btnRemover").prop("hidden", false);
    $("#btnAlterar").prop("hidden", true);

    habilitaForm();
  }

  function desabilitaForm() {
  $("#descricao").prop("readonly", true);
  $("#valor").prop("readonly", true);
  $("#data_vencimento").prop("readonly", true);
  $("#data_pagamento").prop("readonly", true);
  $("#deleted").prop("disabled", true);
}

  //@ Salva a alteração
  //@ console.log("[view_cadCursos|btnSalvarAlteracao] :", )
  async function btnSalvarAlteracao() {
    // Criação de um objeto para guardar os dados do formulário
    const contaData = {
        contaid: contaID,
        descricao: document.getElementById("descricao").value,
        valor: document.getElementById("valor").value,
        data_vencimento: document.getElementById("data_vencimento").value,
        data_pagamento: document.getElementById("data_pagamento").value,
        deleted: document.getElementById("deleted").checked
    };

    // Validação do formulário
    const validado = validaForm(contaData);
    if (!validado) {
        return;
    }

    try {
        // Realiza a chamada para o back-end
        console.log('Enviando dados:', contaData);
        const resp = await axios.post("/contas_a_pagar/updateContaAPagar", contaData, {
            headers: {
                "Content-Type": "application/json",
            },
        });
        console.log('Resposta recebida:', resp);


        // Lida com a resposta do back-end
        if (resp.data.status === "ok") {
            alert(resp.data.mensagem);
            window.open("/contas_a_pagar/openContaUpdate/" + String(contaData.contaid), "_self");
        } else {
            alert("Houve um erro: " + resp.data.mensagem);
        }
    } catch (error) {
        alert("[view_cadConta|btnSalvarAlteracao]Ocorreu um erro inesperado!" + error);
    }
}


  //@ Cancela a alteração
  //@ console.log("[view_cadCursos|btnCancelarAlteracao] Valor do id", $("#cursoid").val());    
  async function btnCancelarAlteracao() {
    window.open("/contas_a_pagar/openContaUpdate/" + String(contaID), "_self");
  }


//@ Remove curso
  //@ console.log("[view_cadCursos|btnSalvarAlteracao] :", )
  async function btnRemover() { 

    var confirma = confirm("Deseja realmente remover o registro?");
    if (!confirma) {
      return; //@ Se o usuário selecionar Cancela, o registro não é removido.
    }
    const formData = new FormData(form);

    try {
      resp = await axios.post("/contas_a_pagar/deleteContaAPagar", {
        contaID: contaID,
      }, {
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (resp.data.status == "ok") {
        alert(resp.data.mensagem);
        window.open("/contas_a_pagar", "_self");
      } else {
        alert("Houve um erro: " + resp.data.mensagem);
      }
    } catch (error) {
      alert("[view_cadContas|btnSalvarAlteracao]Ocorreu um erro inesperado!" + error);
    }
  }

</script>

<style>
  .required:after {
    content: " *";
    color: red;
  }
</style>

